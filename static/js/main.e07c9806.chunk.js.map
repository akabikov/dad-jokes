{"version":3,"sources":["Poll.jsx","JokeItem.jsx","loadData.js","DadJokes.jsx","App.js","serviceWorker.js","index.js"],"names":["STEP","up","down","Poll","handleClick","evt","props","vote","id","target","name","rating","this","ratingClass","className","onClick","React","Component","JokeItem","text","poll","API_URL","API_HEADERS","Accept","a","fetch","headers","response","ok","json","joke","Error","loadData","DadJokes","state","jokes","isLoading","orderByRating","getJoke","ids","has","addBatchOfJokes","n","setState","existIds","Set","map","el","newJokes","Array","i","add","localStorage","setItem","JSON","stringify","handleGetMore","handleOrderBy","step","parse","getItem","_prevProps","prevState","jokesToShow","sort","b","jokesList","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e07c9806.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Poll.css\";\r\n\r\nconst STEP = {\r\n  up: +1,\r\n  down: -1,\r\n};\r\n\r\nclass Poll extends React.Component {\r\n  handleClick = (evt) => {\r\n    const { vote, id } = this.props;\r\n    vote(id, STEP[evt.target.name]);\r\n  };\r\n\r\n  render() {\r\n    const { rating } = this.props;\r\n\r\n    let ratingClass =\r\n      +rating > 0 ? \"positive\" : +rating < 0 ? \"negative\" : \"neutral\";\r\n\r\n    return (\r\n      <div className='Poll'>\r\n        <button name='up' onClick={this.handleClick} />\r\n        <span className={ratingClass}>{rating}</span>\r\n        <button name='down' onClick={this.handleClick} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Poll;\r\n","import React from \"react\";\r\nimport Poll from \"./Poll\";\r\nimport \"./JokeItem.css\";\r\n\r\nclass JokeItem extends React.Component {\r\n  render() {\r\n    const { text, ...poll } = this.props;\r\n\r\n    return (\r\n      <div className='JokeItem'>\r\n        {text}\r\n        <Poll {...poll} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JokeItem;\r\n","const API_URL = \"https://icanhazdadjoke.com/\";\r\nconst API_HEADERS = { Accept: \"application/json\" };\r\n\r\nasync function loadData() {\r\n  let response = await fetch(API_URL, {\r\n    headers: API_HEADERS,\r\n  });\r\n\r\n  if (response.ok) {\r\n    let { id, joke } = await response.json();\r\n    return { id, text: joke };\r\n  } else {\r\n    throw new Error(\"Can't load joke\");\r\n  }\r\n}\r\n\r\nexport default loadData;\r\n","import React from \"react\";\r\nimport JokeItem from \"./JokeItem\";\r\nimport loadData from \"./loadData\";\r\nimport \"./DadJokes.css\";\r\n\r\nconst JOKES_BATCH_SIZE = 10;\r\n\r\nclass DadJokes extends React.Component {\r\n  state = { jokes: [], isLoading: false, orderByRating: false };\r\n\r\n  componentDidMount() {\r\n    const jokes = JSON.parse(localStorage.getItem(\"jokes\"));\r\n\r\n    if (jokes) {\r\n      this.setState({ jokes });\r\n    } else {\r\n      this.addBatchOfJokes();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(_prevProps, prevState) {\r\n    const { jokes } = this.state;\r\n    if (prevState.jokes !== jokes) {\r\n      localStorage.setItem(\"jokes\", JSON.stringify(jokes));\r\n    }\r\n  }\r\n\r\n  getJoke = async (ids) => {\r\n    let joke = await loadData();\r\n\r\n    if (ids.has(joke.id)) {\r\n      joke = await this.getJoke(ids);\r\n    }\r\n\r\n    return joke;\r\n  };\r\n\r\n  addBatchOfJokes = async (n = JOKES_BATCH_SIZE) => {\r\n    this.setState({ isLoading: true });\r\n\r\n    let { jokes } = this.state;\r\n    let existIds = new Set(jokes.map((el) => el.id));\r\n\r\n    const newJokes = new Array(n);\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      let joke = await this.getJoke(existIds);\r\n      newJokes[i] = { ...joke, rating: 0 };\r\n      existIds.add(joke.id);\r\n    }\r\n\r\n    jokes = [...jokes, ...newJokes];\r\n\r\n    this.setState({ jokes, isLoading: false });\r\n\r\n    localStorage.setItem(\"jokes\", JSON.stringify(jokes));\r\n  };\r\n\r\n  handleGetMore = () => {\r\n    this.addBatchOfJokes();\r\n  };\r\n\r\n  handleOrderBy = () => {\r\n    this.setState(({ orderByRating }) => ({ orderByRating: !orderByRating }));\r\n  };\r\n\r\n  vote = (id, step) => {\r\n    this.setState(({ jokes }) => ({\r\n      jokes: jokes.map((el) =>\r\n        el.id === id ? { ...el, rating: el.rating + step } : el\r\n      ),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { jokes, isLoading, orderByRating } = this.state;\r\n\r\n    const jokesToShow = [...jokes];\r\n\r\n    if (orderByRating) jokesToShow.sort((a, b) => b.rating - a.rating);\r\n\r\n    const jokesList = jokesToShow.map((joke) => (\r\n      <li key={joke.id}>\r\n        <JokeItem {...joke} vote={this.vote} />\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <>\r\n        {isLoading ? (\r\n          <div className='Loader'></div>\r\n        ) : (\r\n          <>\r\n            <header>\r\n              <div>\r\n                <button onClick={this.handleGetMore}>More jokes!</button>\r\n                <button onClick={this.handleOrderBy}>\r\n                  Order by\r\n                  {orderByRating ? \" recency\" : \" rating\"}\r\n                </button>\r\n              </div>\r\n            </header>\r\n            <main>\r\n              <ul className='JokeList'>{jokesList}</ul>\r\n            </main>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DadJokes;\r\n","import React from 'react';\nimport DadJokes from \"./DadJokes\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DadJokes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}